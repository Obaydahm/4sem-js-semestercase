import userFacade from '../src/facades/userFacade';
import { expect } from "chai";
import { ApiError } from '../src/errors/apiError';

describe("Verify the userFacade", () => {

  beforeEach(() => {
    userFacade.users = [
      { name: "Peter Pan", username: "pp@b.dk", password: "secret", role: "user" },
      { name: "Donald Duck", username: "dd@b.dk", password: "secret", role: "user" },
      { name: "admin", username: "admin@a.dk", password: "secret", role: "admin" }
    ]

  })


  it("Should Add the user Kurt", async () => {
    const newUser = { name: "Jan Olsen", username: "jo@b.dk", password: "secret", role: "user" }
    try {
      const status = await userFacade.addUser(newUser);
      expect(status).to.be.equal("User was added")
      expect(userFacade.users.length).to.equal(4)
    } catch (err) {
    } finally { }
  })
  it("Should remove the user Peter", async () => {
    try {
      const status = await userFacade.deleteUser("pp@b.dk");
      expect(status).to.be.equal("User was deleted")
      expect(userFacade.users.length).to.equal(2)
    } catch (err) {
    } finally { }
  })
  it("Should get three users", async () => {
    try {
      const all = await userFacade.getAllUsers();
      expect(all.length).to.be.equal(3)
    } catch (err) { }
    finally { }
  })

  it("Should find Donald Duck", async () => {
    try {
      const donald = await userFacade.getUser("dd@b.dk");
      expect(donald.name).to.be.equal("Donald Duck")
    } catch (err) { }
    finally { }
  })
  it("Should not find xxx.@.b.dk", async () => {
    try {
      const donald = await userFacade.getUser("xxx.@.b.dk");
      throw new Error("Should not get here")
    } catch (err) {
      expect(err instanceof ApiError).to.be.equal(true)
      expect(err.message).to.be.equal("User Not Found")
    }
    finally { }
  })

})